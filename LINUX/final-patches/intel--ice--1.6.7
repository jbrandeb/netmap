diff --git a/ice/Makefile b/ice/Makefile
index 5f004daea0c9..f1eea8ba0f0e 100644
--- a/ice/Makefile
+++ b/ice/Makefile
@@ -32,9 +32,9 @@ endif # KERNEL_CONFIG_INCLUDED
 ccflags-y += -I$(src)
 subdir-ccflags-y += -I$(src)
 
-obj-$(CONFIG_ICE) += ice.o
+obj-$(CONFIG_ICE) += ice$(NETMAP_DRIVER_SUFFIX).o
 
-ice-y := ice_main.o	\
+ice$(NETMAP_DRIVER_SUFFIX)-y := ice_main.o	\
 	 ice_controlq.o	\
 	 ice_common.o	\
 	 ice_nvm.o	\
@@ -60,32 +60,32 @@ ice-y := ice_main.o	\
 	 ice_lag.o		\
 	 ice_fwlog.o		\
 	 ice_ethtool.o
-ice-$(CONFIG_NET_DEVLINK:m=y) += ice_devlink.o ice_fw_update.o
-ice-$(CONFIG_NET_DEVLINK:m=y) += ice_eswitch.o ice_repr.o
-ice-$(CONFIG_MFD_CORE:m=y) += ice_idc.o
-ice-$(CONFIG_DEBUG_FS) += ice_debugfs.o
-ice-$(CONFIG_PCI_IOV) += ice_virtchnl_allowlist.o
-ice-$(CONFIG_PCI_IOV) += ice_dcf.o
-ice-$(CONFIG_PCI_IOV) += ice_virtchnl_fdir.o
-ice-$(CONFIG_PCI_IOV) += ice_virtchnl_pf.o ice_sriov.o ice_vf_vsi_vlan_ops.o
-ice-$(CONFIG_PTP_1588_CLOCK:m=y) += ice_ptp.o ice_ptp_hw.o
-ice-$(CONFIG_PTP_1588_CLOCK:m=y) += ice_cgu_ops.o ice_cgu_util.o
-ice-$(CONFIG_DCB) += ice_dcb.o ice_dcb_nl.o ice_dcb_lib.o
-ice-$(CONFIG_RFS_ACCEL) += ice_arfs.o
-ice-$(CONFIG_XDP_SOCKETS) += ice_xsk.o
-ice-y += kcompat.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_NET_DEVLINK:m=y) += ice_devlink.o ice_fw_update.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_NET_DEVLINK:m=y) += ice_eswitch.o ice_repr.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_MFD_CORE:m=y) += ice_idc.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_DEBUG_FS) += ice_debugfs.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_PCI_IOV) += ice_virtchnl_allowlist.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_PCI_IOV) += ice_dcf.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_PCI_IOV) += ice_virtchnl_fdir.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_PCI_IOV) += ice_virtchnl_pf.o ice_sriov.o ice_vf_vsi_vlan_ops.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_PTP_1588_CLOCK:m=y) += ice_ptp.o ice_ptp_hw.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_PTP_1588_CLOCK:m=y) += ice_cgu_ops.o ice_cgu_util.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_DCB) += ice_dcb.o ice_dcb_nl.o ice_dcb_lib.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_RFS_ACCEL) += ice_arfs.o
+ice$(NETMAP_DRIVER_SUFFIX)-$(CONFIG_XDP_SOCKETS) += ice_xsk.o
+ice$(NETMAP_DRIVER_SUFFIX)-y += kcompat.o
 # Use kcompat pldmfw.c if kernel does not provide CONFIG_PLDMFW
 ifndef CONFIG_PLDMFW
-ice-y += kcompat_pldmfw.o
+ice$(NETMAP_DRIVER_SUFFIX)-y += kcompat_pldmfw.o
 endif
 # Use kcompat DIMLIB if kernel doesn't provide it
 ifndef CONFIG_DIMLIB
-ice-y += kcompat_dim.o kcompat_net_dim.o
+ice$(NETMAP_DRIVER_SUFFIX)-y += kcompat_dim.o kcompat_net_dim.o
 endif
 else	# ifneq($(KERNELRELEASE),)
 # normal makefile
 
-DRIVER := ice
+DRIVER := ice${NETMAP_DRIVER_SUFFIX}
 
 COMMON_MK ?= $(wildcard common.mk)
 ifeq (${COMMON_MK},)
@@ -111,7 +111,7 @@ endif

 all:
        +$(call kernelbuild,modules)
-       @gzip -c ../${DRIVER}.${MANSECTION} > ${DRIVER}.${MANSECTION}.gz
+       @gzip -c ../ice.${MANSECTION} > ${DRIVER}.${MANSECTION}.gz
 ifneq ($(wildcard lttng),)
        $(MAKE) -C lttng
 endif
diff --git a/ice/ice_base.c b/ice/ice_base.c
index e2acab0c0777..25bebea92e6c 100644
--- a/ice/ice_base.c
+++ b/ice/ice_base.c
@@ -448,6 +448,10 @@ static int ice_setup_rx_ctx(struct ice_ring *ring)
 	/* Rx queue threshold in units of 64 */
 	rlan_ctx.lrxqthresh = 1;
 
+#ifdef DEV_NETMAP
+	ice_netmap_preconfigure_rx_ring(ring, &rlan_ctx);
+#endif /* DEV_NETMAP */
+
 	/* Enable Flexible Descriptors in the queue context which
 	 * allows this driver to select a specific receive descriptor format
 	 * increasing context priority to pick up profile ID; default is 0x01;
@@ -599,6 +603,11 @@ int ice_vsi_cfg_rxq(struct ice_ring *ring)
 	}
 #endif /* HAVE_AF_XDP_ZC_SUPPORT */
 
+#ifdef DEV_NETMAP
+	if (ice_netmap_configure_rx_ring(ring))
+		return 0;
+#endif /* DEV_NETMAP */
+
 	ice_alloc_rx_bufs(ring, num_bufs);
 
 	return 0;
@@ -858,6 +867,10 @@ ice_vsi_cfg_txq(struct ice_vsi *vsi, struct ice_ring *ring,
 	if (pf_q == le16_to_cpu(txq->txq_id))
 		ring->txq_teid = le32_to_cpu(txq->q_teid);
 
+#ifdef DEV_NETMAP
+	ice_netmap_configure_tx_ring(ring);
+#endif /* DEV_NETMAP */
+
 	return 0;
 }
 
diff --git a/ice/ice_lib.c b/ice/ice_lib.c
index 07ce260825c2..aef27b083d84 100644
--- a/ice/ice_lib.c
+++ b/ice/ice_lib.c
@@ -2745,6 +2745,11 @@ ice_vsi_setup(struct ice_pf *pf, struct ice_port_info *pi,
 	if (!vsi->agg_node)
 		ice_set_agg_vsi(vsi);
 
+#ifdef DEV_NETMAP
+	if (test_bit(ICE_VSI_NETDEV_REGISTERED, vsi->state))
+		ice_netmap_attach(vsi);
+#endif
+
 	return vsi;
 
 unroll_clear_rings:
@@ -3072,6 +3077,11 @@ int ice_vsi_release(struct ice_vsi *vsi)
 		return -ENODEV;
 	pf = vsi->back;
 
+#ifdef DEV_NETMAP
+	if (test_bit(ICE_VSI_NETDEV_REGISTERED, vsi->state))
+		netmap_detach(vsi->netdev);
+#endif
+
 	/* do not unregister while driver is in the reset recovery pending
 	 * state. Since reset/rebuild happens through PF service task workqueue,
 	 * it's not a good idea to unregister netdev that is associated to the
diff --git a/ice/ice_main.c b/ice/ice_main.c
index 9034a27fec4f..2e36789455ab 100644
--- a/ice/ice_main.c
+++ b/ice/ice_main.c
@@ -23,6 +23,11 @@
 #include "ice_tc_lib.h"
 #include "ice_vsi_vlan_ops.h"
 #include "ice_fwlog.h"
+#if IS_ENABLED(CONFIG_NETMAP)
+#define NETMAP_ICE_MAIN
+#define DEV_NETMAP
+#include <ice_netmap_linux.h>
+#endif
 
 #define DRV_VERSION_MAJOR 1
 #define DRV_VERSION_MINOR 6
diff --git a/ice/ice_txrx.c b/ice/ice_txrx.c
index c3c2746fe977..34dac5859c57 100644
--- a/ice/ice_txrx.c
+++ b/ice/ice_txrx.c
@@ -23,6 +23,11 @@
 #include "ice_eswitch.h"
 #include <net/busy_poll.h>
 
+#if defined(CONFIG_NETMAP) || defined (CONFIG_NETMAP_MODULE)
+#include <ice_netmap_linux.h>
+#define DEV_NETMAP
+#endif /* DEV_NETMAP */
+
 #define ICE_RX_HDR_SIZE		256
 
 
@@ -234,6 +238,11 @@ static bool ice_clean_tx_irq(struct ice_ring *tx_ring, int napi_budget)
 	struct ice_tx_desc *tx_desc;
 	struct ice_tx_buf *tx_buf;
 
+#ifdef DEV_NETMAP
+	if (tx_ring->netdev && netmap_tx_irq(tx_ring->netdev, tx_ring->q_index) != NM_IRQ_PASS)
+		return true;
+#endif /* DEV_NETMAP */
+
 	tx_buf = &tx_ring->tx_buf[i];
 	tx_desc = ICE_TX_DESC(tx_ring, i);
 	i -= tx_ring->count;
@@ -1478,6 +1487,16 @@ int ice_clean_rx_irq(struct ice_ring *rx_ring, int budget)
 	struct xdp_buff xdp;
 	bool failure;
 
+#ifdef DEV_NETMAP
+	if (rx_ring->netdev) {
+		int dummy, nm_irq;
+
+		nm_irq = netmap_rx_irq(rx_ring->netdev, rx_ring->q_index, &dummy);
+		if (nm_irq != NM_IRQ_PASS) {
+			return (nm_irq == NM_IRQ_COMPLETED) ? 1 : budget;
+		}
+	}
+#endif /* DEV_NETMAP */
 #ifdef HAVE_XDP_SUPPORT
 #ifdef HAVE_XDP_BUFF_RXQ
 	xdp.rxq = &rx_ring->xdp_rxq;
